name: Deploy Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        working-directory: terraform
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3 

      - name: Zip Lambda function
        run: |
          cd lambda
          zip -r ../lambda.zip .

      - name: Terraform Apply
        run: terraform apply -auto-approve # TF_LOG=DEBUG 
        working-directory: terraform

      - name: Commit Terraform state
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          
          # Récupérer toutes les branches
          git fetch origin state || git branch state
          git checkout state || git checkout -b state
          
          # Mettre à jour localement la branche state pour éviter les conflits
          git pull --rebase origin state || echo "No remote changes"

          mkdir -p terraform/state
          mv terraform/terraform.tfstate terraform/state/terraform.tfstate
          git add terraform/state/terraform.tfstate
          git commit -m "Update Terraform state" || echo "No changes to commit"

          # Forcer un push si nécessaire en cas de conflits
          git push origin state || (git pull --rebase origin state && git push origin state)
      
      - name: Get API URL
        run: echo "API URL $(terraform output api_url)"
        working-directory: terraform
